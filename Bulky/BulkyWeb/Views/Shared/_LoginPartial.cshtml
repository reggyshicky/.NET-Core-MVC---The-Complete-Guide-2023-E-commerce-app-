@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager // is responsible for handling user sign-ins, sign-outs, and other authentication-related tasks.
@inject UserManager<IdentityUser> UserManager //is used for managing user-related tasks, such as creating, updating, and deleting user accounts.
<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a id="manage" class="nav-link " asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link  border-0">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link " id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link " id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
